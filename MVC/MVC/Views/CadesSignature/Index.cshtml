@model MVC.Models.SignatureStartModel
@{
	ViewBag.Title = "CAdES Element Signature";
}

<h2>CAdES Element Signature</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "signForm", role = "form" })) {
	@Html.ValidationSummary("", new { @class = "text-danger" })

	@* Hidden fields used to pass data from the action to the "signature form" javascript (see below) and vice-versa *@
	@Html.HiddenFor(m => m.CertThumb, new { id = "certThumb" })
	@Html.HiddenFor(m => m.CertContent, new { id = "certContent" })
	
	<div class="form-group">
		<label>File to sign</label>
		<p>You'll be signing <a href='/Download/Sample'>this sample document</a>.</p>
	</div>

	<div class="form-group">
		<label for="certificateSelect">Choose a certificate</label>
		<select id="certificateSelect" class="form-control"></select>
	</div>

	<button id="signButton" type="button" class="btn btn-primary">Sign File</button>
	<button id="refreshButton" type="button" class="btn btn-default">Refresh Certificates</button>
}

@section Scripts {
	@* Include the JS for using the Web PKI component for accessing the user's certificates on the browser *@
	<script src="@Url.Content("~/Content/js/lacuna-web-pki-2.5.0.js")"></script>

	<script>
		// -------------------------------------------------------------------------------------------------
		// Global variables
		// -------------------------------------------------------------------------------------------------
		var pki = new LacunaWebPKI();

		// -------------------------------------------------------------------------------------------------
		// Function called once the page is loaded
		// -------------------------------------------------------------------------------------------------
		function init() {

			// Wireup of button clicks
			$('#signButton').click(startSignature);
			$('#refreshButton').click(refresh);

			// Block the UI while we get things ready
			$.blockUI({ message: 'Inicializando ...' });

			// Call the init() method on the LacunaWebPKI object, passing a callback for when
			// the component is ready to be used and another to be called when an error occurrs
			// on any of the subsequent operations. For more information, see:
			// https://webpki.lacunasoftware.com/#/Documentation#coding-the-first-lines
			// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_init
			pki.init({
				ready: loadCertificates, // as soon as the component is ready we'll load the certificates
				defaultError: onWebPkiError // generic error callback on Content/js/app/site.js
			});
		}

		// -------------------------------------------------------------------------------------------------
		// Function called when the user clicks the "Refresh" button
		// -------------------------------------------------------------------------------------------------
		function refresh() {
			// Block the UI while we load the certificates
			$.blockUI();
			// Invoke the loading of the certificates
			loadCertificates();
		}

		// -------------------------------------------------------------------------------------------------
		// Function that loads the certificates, either on startup or when the user
		// clicks the "Refresh" button. At this point, the UI is already blocked.
		// -------------------------------------------------------------------------------------------------
		function loadCertificates() {

			// Call the listCertificates() method to list the user's certificates. For more information see
			// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_listCertificates
			pki.listCertificates({

				// specify that expired certificates should be ignored
				//filter: pki.filters.isWithinValidity,

				// in order to list only certificates within validity period and having a CPF (ICP-Brasil), use this instead:
				//filter: pki.filters.all(pki.filters.hasPkiBrazilCpf, pki.filters.isWithinValidity),

				// id of the select to be populated with the certificates
				selectId: 'certificateSelect',

				// function that will be called to get the text that should be displayed for each option
				selectOptionFormatter: function (cert) {
					return cert.subjectName + ' (expires on ' + cert.validityEnd.toDateString() + ', issued by ' + cert.issuerName + ')';
				}

			}).success(function () {

				// once the certificates have been listed, unblock the UI
				$.unblockUI();

			});
		}

		// -------------------------------------------------------------------------------------------------
		// Function called when the user clicks the "Sign" button
		// -------------------------------------------------------------------------------------------------
		function startSignature() {
			// Block the UI while we perform the signature
			$.blockUI({ message: 'Assinando ...' });

			// Get the value attribute of the option selected on the dropdown. Since we placed the "thumbprint"
			// property on the value attribute of each item (see function loadCertificates above), we're actually
			// retrieving the thumbprint of the selected certificate.
			var selectedCertThumbprint = $('#certificateSelect').val();
			$('#certThumb').val(selectedCertThumbprint);

			pki.readCertificate(selectedCertThumbprint).success(function (certEncoded) {
				$('#certContent').val(certEncoded);
				$('#signForm').submit();
			});
		}

		// -------------------------------------------------------------------------------------------------
		// Function called if an error occurs on the Web PKI component
		// -------------------------------------------------------------------------------------------------
		function onWebPkiError(message, error, origin) {
			// Unblock the UI
			$.unblockUI();
			// Log the error to the browser console (for debugging purposes)
			if (console) {
				console.log('An error has occurred on the signature browser component: ' + message, error);
			}
			// Show the message to the user. You might want to substitute the alert below with a more user-friendly UI
			// component to show the error.
			alert(message);
		}

		// Schedule the init function to be called once the page is loaded
		$(document).ready(init);
	</script>
}
