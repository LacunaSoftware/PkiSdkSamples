@model MVC.Models.SignatureCompleteModel

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "signForm", role = "form" })) {
	@Html.ValidationSummary("", new { @class = "text-danger" })

	@* Hidden fields used to pass data from the action to the "signature form" javascript (see below) and vice-versa *@
	@Html.HiddenFor(m => m.CertThumb, new { id = "certThumb" })
	@Html.HiddenFor(m => m.ToSignHash, new { id = "toSignHash" })
	@Html.HiddenFor(m => m.TransferData, new { id = "transferData" })
	@Html.HiddenFor(m => m.DigestAlgorithmOid, new { id = "digestAlgorithm" })
	@Html.HiddenFor(m => m.Signature, new { id = "signature"})
}

<script>
	// -------------------------------------------------------------------------------------------------
	// Global variables
	// -------------------------------------------------------------------------------------------------
	var pki = new LacunaWebPKI();

	// -------------------------------------------------------------------------------------------------
	// Function called once the page is loaded
	// -------------------------------------------------------------------------------------------------
	function init() {

		// Block the UI while we get things ready
		$.blockUI({ message: 'Assinando ...' });

		// Call the init() method on the LacunaWebPKI object, passing a callback for when
		// the component is ready to be used and another to be called when an error occurrs
		// on any of the subsequent operations. For more information, see:
		// https://webpki.lacunasoftware.com/#/Documentation#coding-the-first-lines
		// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_init
		pki.init({
			ready: sign, // as soon as the component is ready we'll load the certificates
			defaultError: onWebPkiError // generic error callback on Content/js/app/site.js
		});
	}

	function sign() {
		pki.signHash({
			thumbprint: $('#certThumb').val(),
			hash: $('#toSignHash').val(),
			digestAlgorithm: $('#digestAlgorithm').val()
		}).success(function (signature) {
			$('#signature').val(signature);
			$('#signForm').submit();
		});
	}

	// -------------------------------------------------------------------------------------------------
	// Function called if an error occurs on the Web PKI component
	// -------------------------------------------------------------------------------------------------
	function onWebPkiError(message, error, origin) {
		// Unblock the UI
		$.unblockUI();
		// Log the error to the browser console (for debugging purposes)
		if (console) {
			console.log('An error has occurred on the signature browser component: ' + message, error);
		}
		// Show the message to the user. You might want to substitute the alert below with a more user-friendly UI
		// component to show the error.
		alert(message);
	}

	// Schedule the init function to be called once the page is loaded
	$(document).ready(init);
</script>
